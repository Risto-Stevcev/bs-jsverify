// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Js_null from "bs-platform/lib/es6/js_null.js";
import * as Js_types from "bs-platform/lib/es6/js_types.js";
import * as Jsverify from "jsverify";
import * as Js_option from "bs-platform/lib/es6/js_option.js";
import * as Pervasives from "bs-platform/lib/es6/pervasives.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Js_null_undefined from "bs-platform/lib/es6/js_null_undefined.js";

function either(left_fn, right_fn, e) {
  if (e.TAG) {
    return Curry._1(right_fn, e._0);
  } else {
    return Curry._1(left_fn, e._0);
  }
}

function left(l) {
  return {
          TAG: /* Left */0,
          _0: l
        };
}

function right(r) {
  return {
          TAG: /* Right */1,
          _0: r
        };
}

function bimap(left_fn, right_fn, e) {
  if (e.TAG) {
    return {
            TAG: /* Right */1,
            _0: Curry._1(right_fn, e._0)
          };
  } else {
    return {
            TAG: /* Left */0,
            _0: Curry._1(left_fn, e._0)
          };
  }
}

var Types = {
  either: either,
  left: left,
  right: right,
  bimap: bimap
};

var arb_bool = Jsverify.bool.smap((function (x) {
        return x;
      }), (function (a) {
        if (a) {
          return true;
        } else {
          return false;
        }
      }), Pervasives.string_of_bool);

function arb_list(a) {
  return Jsverify.array(a).smap($$Array.to_list, $$Array.of_list, (function (l) {
                return Js_option.getWithDefault("", JSON.stringify($$Array.of_list(l)));
              }));
}

function arb_null(arb) {
  return Jsverify.oneof([
              arb,
              Jsverify.constant(null)
            ]);
}

function arb_nullable(arb) {
  return Jsverify.oneof([
              arb,
              Jsverify.constant(null),
              Jsverify.constant(undefined)
            ]);
}

function arb_option(arb) {
  return arb_null(arb).smap((function (prim) {
                if (prim === null) {
                  return ;
                } else {
                  return Caml_option.some(prim);
                }
              }), Js_null.fromOption, (function (a) {
                if (a !== undefined) {
                  return "Some(" + (Js_option.getWithDefault("", JSON.stringify(Caml_option.valFromOption(a))) + ")");
                } else {
                  return "None";
                }
              }));
}

function arb_either(arb_a, arb_b) {
  return Jsverify.oneof([
                Jsverify.record({
                      left: arb_a
                    }),
                Jsverify.record({
                      right: arb_b
                    })
              ]).smap((function (r) {
                var is_left = (function(r) { return r.left !== undefined ? 1 : 0 });
                if (is_left(r)) {
                  return {
                          TAG: /* Left */0,
                          _0: r.left
                        };
                } else {
                  return {
                          TAG: /* Right */1,
                          _0: r.right
                        };
                }
              }), (function (e) {
                if (e.TAG) {
                  return {
                          right: e._0
                        };
                } else {
                  return {
                          left: e._0
                        };
                }
              }), (function (e) {
                if (e.TAG) {
                  return "Right(" + (Js_option.getWithDefault("", JSON.stringify(e._0)) + ")");
                } else {
                  return "Left(" + (Js_option.getWithDefault("", JSON.stringify(e._0)) + ")");
                }
              }));
}

var Arbitrary = {
  Types: Types,
  arb_bool: arb_bool,
  arb_list: arb_list,
  arb_null: arb_null,
  arb_nullable: arb_nullable,
  arb_option: arb_option,
  arb_either: arb_either
};

var Generator = {};

var Shrink = {};

function options(tests, size, quiet, rngState, param) {
  return {
          tests: Js_null_undefined.fromOption(tests),
          size: Js_null_undefined.fromOption(size),
          quiet: Js_null_undefined.fromOption(quiet),
          rngState: Js_null_undefined.fromOption(rngState)
        };
}

function to_result(result) {
  var value = Js_types.classify(result);
  if (typeof value === "number" || value.TAG !== /* JSObject */3) {
    return ;
  } else {
    return Caml_option.some(value._0);
  }
}

function forall1(a1, fn) {
  return Jsverify.forall(a1, Curry.__1(fn));
}

function forall2(a1, a2, fn) {
  return Jsverify.forall(a1, a2, Curry.__2(fn));
}

function forall3(a1, a2, a3, fn) {
  return Jsverify.forall(a1, a2, a3, Curry.__3(fn));
}

function forall4(a1, a2, a3, a4, fn) {
  return Jsverify.forall(a1, a2, a3, a4, Curry.__4(fn));
}

function forall5(a1, a2, a3, a4, a5, fn) {
  return Jsverify.forall(a1, a2, a3, a4, a5, Curry.__5(fn));
}

function property1(s, a1, fn) {
  Jsverify.property(s, a1, Curry.__1(fn));
  
}

function async_property1(s, a1, fn) {
  Jsverify.property(s, a1, (function (a) {
          return Curry._1(fn, a).then(function (x) {
                      return Promise.resolve(x);
                    });
        }));
  
}

function property2(s, a1, a2, fn) {
  Jsverify.property(s, a1, a2, Curry.__2(fn));
  
}

function async_property2(s, a1, a2, fn) {
  Jsverify.property(s, a1, a2, (function (a, b) {
          return Curry._2(fn, a, b).then(function (x) {
                      return Promise.resolve(x);
                    });
        }));
  
}

function property3(s, a1, a2, a3, fn) {
  Jsverify.property(s, a1, a2, a3, Curry.__3(fn));
  
}

function async_property3(s, a1, a2, a3, fn) {
  Jsverify.property(s, a1, a2, a3, (function (a, b, c) {
          return Curry._3(fn, a, b, c).then(function (x) {
                      return Promise.resolve(x);
                    });
        }));
  
}

function property4(s, a1, a2, a3, a4, fn) {
  Jsverify.property(s, a1, a2, a3, a4, Curry.__4(fn));
  
}

function async_property4(s, a1, a2, a3, a4, fn) {
  Jsverify.property(s, a1, a2, a3, a4, (function (a, b, c, d) {
          return Curry._4(fn, a, b, c, d).then(function (x) {
                      return Promise.resolve(x);
                    });
        }));
  
}

function property5(s, a1, a2, a3, a4, a5, fn) {
  Jsverify.property(s, a1, a2, a3, a4, a5, Curry.__5(fn));
  
}

function async_property5(s, a1, a2, a3, a4, a5, fn) {
  Jsverify.property(s, a1, a2, a3, a4, a5, (function (a, b, c, d, e) {
          return Curry._5(fn, a, b, c, d, e).then(function (x) {
                      return Promise.resolve(x);
                    });
        }));
  
}

var Property = {
  options: options,
  to_result: to_result,
  forall1: forall1,
  forall2: forall2,
  forall3: forall3,
  forall4: forall4,
  forall5: forall5,
  property1: property1,
  async_property1: async_property1,
  property2: property2,
  async_property2: async_property2,
  property3: property3,
  async_property3: async_property3,
  property4: property4,
  async_property4: async_property4,
  property5: property5,
  async_property5: async_property5
};

export {
  Arbitrary ,
  Generator ,
  Shrink ,
  Property ,
  
}
/* arb_bool Not a pure module */
