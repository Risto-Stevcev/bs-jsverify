// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Js_types from "bs-platform/lib/es6/js_types.js";
import * as Jsverify from "jsverify";
import * as Mocha$BsMocha from "bs-mocha/src/Mocha.bs.js";
import * as Verify$BsJsverify from "../src/Verify.bs.js";

Mocha$BsMocha.describe("JsVerify")(undefined, undefined, undefined, (function (param) {
        Verify$BsJsverify.Property.property1("boolean `not` (involution)", Verify$BsJsverify.Arbitrary.arb_bool, (function (b) {
                return b === b;
              }));
        Verify$BsJsverify.Property.property3("nat `+` (associative)", Jsverify.nat, Jsverify.nat, Jsverify.nat, (function (n1, n2, n3) {
                return ((n1 + n2 | 0) + n3 | 0) === (n1 + (n2 + n3 | 0) | 0);
              }));
        Verify$BsJsverify.Property.property1("Js.null(nat)", Verify$BsJsverify.Arbitrary.arb_null(Jsverify.nat), (function (n) {
                if (n !== null) {
                  return n >= 0;
                } else {
                  return true;
                }
              }));
        Verify$BsJsverify.Property.property1("Js.nullable(nat)", Verify$BsJsverify.Arbitrary.arb_nullable(Jsverify.nat), (function (n) {
                if (n == null) {
                  return true;
                } else {
                  return n >= 0;
                }
              }));
        Verify$BsJsverify.Property.property1("option(nat)", Verify$BsJsverify.Arbitrary.arb_option(Jsverify.nat), (function (n) {
                if (n !== undefined) {
                  return n >= 0;
                } else {
                  return true;
                }
              }));
        Verify$BsJsverify.Property.property1("sum of nats is >= 0", Jsverify.array(Jsverify.nat), (function (a) {
                return $$Array.fold_left((function (prim, prim$1) {
                              return prim + prim$1 | 0;
                            }), 0, a) >= 0;
              }));
        var arb_record_c = Jsverify.record({
              d: Jsverify.bool,
              e: Verify$BsJsverify.Arbitrary.arb_null(Jsverify.nat)
            });
        Verify$BsJsverify.Property.property1("unsafe_arb_record", Jsverify.record({
                  a: Jsverify.string,
                  b: Jsverify.nat,
                  c: arb_record_c
                }), (function (r) {
                var match = Js_types.classify(r.a);
                var tmp;
                tmp = typeof match === "number" || match.TAG !== /* JSString */1 ? false : true;
                if (!tmp) {
                  return false;
                }
                var n = Js_types.classify(r.b);
                var tmp$1;
                tmp$1 = typeof n === "number" || n.TAG ? false : n._0 >= 0.0;
                if (!tmp$1) {
                  return false;
                }
                var o = Js_types.classify(r.c);
                if (typeof o === "number") {
                  return false;
                }
                if (o.TAG !== /* JSObject */3) {
                  return false;
                }
                var o$1 = o._0;
                var match$1 = Js_types.classify(o$1.d);
                if (!(
                    typeof match$1 === "number" ? match$1 < 2 : false
                  )) {
                  return false;
                }
                var n$1 = Js_types.classify(o$1.e);
                if (typeof n$1 === "number") {
                  if (n$1 === /* JSNull */2) {
                    return true;
                  } else {
                    return false;
                  }
                } else if (n$1.TAG) {
                  return false;
                } else {
                  return n$1._0 >= 0.0;
                }
              }));
        Verify$BsJsverify.Property.property1("testing tuple", Jsverify.tuple([
                  Jsverify.nat,
                  Jsverify.nat
                ]), (function (param) {
                var b = param[1];
                var a = param[0];
                if ((a + b | 0) >= a) {
                  return (a + b | 0) >= b;
                } else {
                  return false;
                }
              }));
        Verify$BsJsverify.Property.property1("testing sum", Jsverify.oneof([
                  Jsverify.nat,
                  Jsverify.string
                ]), (function (s) {
                var match = Js_types.classify(s);
                if (typeof match === "number") {
                  return false;
                }
                switch (match.TAG | 0) {
                  case /* JSNumber */0 :
                  case /* JSString */1 :
                      return true;
                  default:
                    return false;
                }
              }));
        return Verify$BsJsverify.Property.property1("testing either", Verify$BsJsverify.Arbitrary.arb_either(Jsverify.nat, Jsverify.string), (function (e) {
                      if (e.TAG) {
                        var match = Js_types.classify(e._0);
                        if (typeof match === "number" || match.TAG !== /* JSString */1) {
                          return false;
                        } else {
                          return true;
                        }
                      }
                      var n = Js_types.classify(e._0);
                      if (typeof n === "number" || n.TAG) {
                        return false;
                      } else {
                        return n._0 >= 0.0;
                      }
                    }));
      }));

export {
  
}
/*  Not a pure module */
